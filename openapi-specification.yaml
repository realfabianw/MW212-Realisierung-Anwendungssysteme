openapi: 3.0.0
info:
  description: This is a description.
  version: 1.0.0
  title: Portfolio Tracker (MW212)
tags:
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
    get:
      tags:
        - user
      summary: Get all users
      description: Get all users. This should only be possible for admins.
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      parameters:
        - name: userId
          in: query
          description: "The users id"
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      responses:
        default:
          description: successful operation
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      parameters:
        - name: userId
          in: path
          description: "The users id"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      parameters:
        - name: userId
          in: path
          description: "The users id"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      parameters:
        - name: userId
          in: path
          description: "The users id"
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /user/{userId}/transactions:
    post:
      tags:
        - transaction
      summary: Create transaction
      description: This can only be done by the logged in user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
        description: Created transcation object
        required: true
      responses:
        default:
          description: successful operation
    get:
      tags:
        - transaction
      summary: Get all transactions
      description: Get all transactions. This should only be possible for admins.
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
  /user/{userId}/transactions/{transactionId}:
    get:
      tags:
        - transaction
      summary: Get transaction by user and id
      parameters:
        - name: userId
          in: path
          description: "The users id"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /transactions/{transactionId}:
    put:
      tags:
        - transaction
      summary: Update user
      description: This can only be done by the logged in user.
      parameters:
        - name: userId
          in: path
          description: "The users id"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
        - transaction
      summary: Delete user
      description: This can only be done by the logged in user.
      parameters:
        - name: userId
          in: path
          description: "The users id"
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found

  /stocks:
    post:
      tags:
        - stocks
      summary: Create transaction
      description: This can only be done by the logged in user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
        description: Created transcation object
        required: true
      responses:
        default:
          description: successful operation
    get:
      tags:
        - stocks
      summary: Get all transactions
      description: Get all transactions. This should only be possible for admins.
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
  /stocks/{stockId}:
    get:
      tags:
        - stocks
      summary: Get transaction by user and id
      parameters:
        - name: userId
          in: path
          description: "The users id"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - stocks
      summary: Update user
      description: This can only be done by the logged in user.
      parameters:
        - name: userId
          in: path
          description: "The users id"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
        - stocks
      summary: Delete user
      description: This can only be done by the logged in user.
      parameters:
        - name: userId
          in: path
          description: "The users id"
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found

  /ticks:
    post:
      tags:
        - ticks
      summary: Create transaction
      description: This can only be done by the logged in user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
        description: Created transcation object
        required: true
      responses:
        default:
          description: successful operation
    get:
      tags:
        - ticks
      summary: Get all transactions
      description: Get all transactions. This should only be possible for admins.
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
  /ticks/{tickId}:
    get:
      tags:
        - ticks
      summary: Get transaction by user and id
      parameters:
        - name: userId
          in: path
          description: "The users id"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - ticks
      summary: Update user
      description: This can only be done by the logged in user.
      parameters:
        - name: userId
          in: path
          description: "The users id"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
        - ticks
      summary: Delete user
      description: This can only be done by the logged in user.
      parameters:
        - name: userId
          in: path
          description: "The users id"
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore.swagger.io/v1
  - url: http://petstore.swagger.io/v1
components:
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: GUID
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
    Price:
      type: object
      properties:
        amount:
          type: number
        currency:
          type: string
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: GUID
        stockId:
          type: string
          format: GUID
        userId:
          type: string
          format: GUID
        timestamp:
          type: string
          format: ISO-8601 (UTC)
        transactionType:
          type: integer
          format: enum (possible string)
        quantity:
          type: number
        price:
          type: object
          $ref: "#/components/schemas/Price"
    Stock:
      type: object
      properties:
        id:
          type: string
          format: GUID
        isin:
          type: string
        wkn:
          type: string
        name:
          type: string
    Tick:
      type: object
      properties:
        id:
          type: string
          format: GUID
        stockId:
          type: string
          format: GUID
        timestamp:
          type: string
          format: ISO-8601 (UTC)
        exchange:
          type: string
        price:
          type: object
          $ref: "#/components/schemas/Price"
